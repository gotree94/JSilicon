# ============================================================================
# Cocotb Makefile for JSilicon Project
# ============================================================================
# This Makefile is specifically for running Cocotb Python-based tests
# 
# File locations (all relative to project root):
#   - tb.v: Project root (JSilicon/tb.v)
#   - test.py: Project root (JSilicon/test.py)
#   - RTL files: src/ directory
#
# Requirements:
#   - cocotb: pip install cocotb
#   - Cadence Xcelium or other supported simulator
#
# Usage (from project root):
#   setenv SIM xcelium (for csh/tcsh)
#   export SIM=xcelium (for bash)
#   make -f Makefile.cocotb
# ============================================================================

# Simulator selection (default: xcelium)
SIM ?= xcelium

# HDL language (required for Xcelium)
TOPLEVEL_LANG = verilog

# Python test module (test.py in project root)
MODULE = test

# Top-level Verilog module (the testbench wrapper)
TOPLEVEL = tb

# Verilog source files (relative to project root)
VERILOG_SOURCES = tb.v \
                  src/alu.v \
                  src/fsm.v \
                  src/inst.v \
                  src/pc.v \
                  src/regfile.v \
                  src/switch.v \
                  src/uart.v \
                  src/jsilicon.v

# Simulator-specific settings
ifeq ($(SIM),xcelium)
    # Xcelium-specific flags
    COMPILE_ARGS += -access +rwc
    COMPILE_ARGS += -v93
    COMPILE_ARGS += -errormax 15
endif

ifeq ($(SIM),icarus)
    # Icarus Verilog flags
    COMPILE_ARGS += -g2012
endif

# Cocotb settings
COCOTB_LOG_LEVEL ?= INFO
COCOTB_RESULTS_FILE = results.xml

# Include Cocotb's makefile (handles the actual test execution)
include $(shell cocotb-config --makefiles)/Makefile.sim

# ============================================================================
# Custom Targets
# ============================================================================

.PHONY: clean_cocotb
clean_cocotb:
	@echo "Cleaning Cocotb simulation files..."
	rm -rf sim_build
	rm -rf __pycache__
	rm -f tb.vcd
	rm -f results.xml
	rm -f *.log

.PHONY: view_wave
view_wave:
	@if [ -f "tb.vcd" ]; then \
		echo "Opening waveform with gtkwave..."; \
		gtkwave tb.vcd &; \
	else \
		echo "Error: tb.vcd not found. Run tests first."; \
	fi

.PHONY: help
help:
	@echo "========================================"
	@echo "Cocotb Testing Makefile"
	@echo "========================================"
	@echo ""
	@echo "File Locations (run from project root):"
	@echo "  JSilicon/tb.v        - Verilog wrapper"
	@echo "  JSilicon/test.py     - Python test"
	@echo "  JSilicon/src/*.v     - RTL sources"
	@echo ""
	@echo "Usage:"
	@echo "  cd ~/JSilicon"
	@echo "  make -f Makefile.cocotb [SIM=simulator]"
	@echo ""
	@echo "Supported Simulators:"
	@echo "  - xcelium (default)"
	@echo "  - icarus"
	@echo "  - verilator"
	@echo "  - vcs"
	@echo ""
	@echo "Examples:"
	@echo "  make -f Makefile.cocotb              # Run with Xcelium"
	@echo "  make -f Makefile.cocotb SIM=icarus   # Run with Icarus"
	@echo "  make -f Makefile.cocotb view_wave    # View waveform"
	@echo "  make -f Makefile.cocotb clean_cocotb # Clean files"
	@echo ""
	@echo "Environment Variables:"
	@echo "  SIM              - Simulator to use"
	@echo "  COCOTB_LOG_LEVEL - Logging level (INFO, DEBUG, etc.)"
	@echo ""
	@echo "Output Files:"
	@echo "  tb.vcd        - Waveform (view with gtkwave)"
	@echo "  results.xml   - Test results"
	@echo "  sim_build/    - Simulator build directory"
	@echo ""
	@echo "========================================"

.PHONY: check_files
check_files:
	@echo "Checking required files..."
	@if [ ! -f "tb.v" ]; then \
		echo "❌ tb.v not found in current directory!"; \
		echo "   Expected: JSilicon/tb.v"; \
		exit 1; \
	else \
		echo "✓ tb.v found"; \
	fi
	@if [ ! -f "test.py" ]; then \
		echo "❌ test.py not found in current directory!"; \
		echo "   Expected: JSilicon/test.py"; \
		exit 1; \
	else \
		echo "✓ test.py found"; \
	fi
	@if [ ! -d "src" ]; then \
		echo "❌ src/ directory not found!"; \
		exit 1; \
	else \
		echo "✓ src/ directory found"; \
	fi
	@echo "All required files present!"
